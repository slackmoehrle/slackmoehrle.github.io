{"./":{"url":"./","title":"Introduction","keywords":"","body":" ** Making a Dr. Mario style game in Cocos Creator Dr. Mario was published by Nintendo in the early 1990's. It turned out to be one of the most popular games of all time. In case you are not familiar you can watch some game play. For a history lesson check out Wikipedia and this article about how the game was prototyped. You can download the complete game, however it is recommended that you follow this tutorial step by step for maximum understanding. If you are following along you will need a few resources Table of contents The following topics are covered, please pick one to get started: Getting started Starting development Creating a menu screen Laying out the user intetface Writing the core game logic ** Nintendo owns Dr. Mario, the name, the logo, the art, the music, etc. We are just fans that wanted to make a kick-ass demo to demo Cocos Creator.â†© "},"01-getting-started/":{"url":"01-getting-started/","title":"Getting started","keywords":"","body":" Let's get started! In-order to write a game, first we need to make sure our development environment is setup properly. Installing Cocos Creator is a simple double-click installlation. Table of contents If you are a JavaScript developer, read this If you are a C++ developer, read this Otherwise, start development! "},"01-getting-started/javascript-developers.html":{"url":"01-getting-started/javascript-developers.html","title":"JavaScript developers","keywords":"","body":"JavaScript developers If you are doing JavaScript development then Cocos Creator contains everything you need besides a text editor. Cocos Creator does not feature editing JavaScript code so a text editor or IDE is a must. To install Cocos Creator, please refer to the official installation guide. Possible text editors include: VS Code, Sublime Text, Atom, Web Storm and pretty much any text editor that you are comfortable with. "},"01-getting-started/cpp-developers.html":{"url":"01-getting-started/cpp-developers.html","title":"C++ developers","keywords":"","body":"C++ developers If you are doing C++ development you will need Cocos Creator, a C++ compiler, a working Cocos2d-x installation, a text editor and knowledge of using a shell (also called the command-line). To install Cocos Creator, please refer to the official installation guide. Your host system will need a C++ compiler. Each platform has many options. Please Google for instructions. Possible text editors include: VS Code, Sublime Text, Atom, Web Storm and pretty much any text editor that you are comfortable with. "},"02-starting-development/":{"url":"02-starting-development/","title":"Starting development","keywords":"","body":"Starting development Before we can begin, we must have some sort of idea about how to develop our game. Planning is important. I never start a game without sitting down and thinking about how it will be played and how I need to break down all the required pieces into manageable tasks. In this case we are replicating an existing game. Let's take a look at it and break it down into pieces. Table of contents Game mechanics summary Designing the game Artwork Creating a Cocos Creator project End Of Chapter Review Video: at the end of this chapter there is a video demonstrating the concepts of this chapter! Next, learn about the game mechanics... "},"02-starting-development/drmario.html":{"url":"02-starting-development/drmario.html","title":"Dr. Mario introduction","keywords":"","body":"What is Dr. Mario like? Let's take a look at a typical game play scene: What is actually going on here? Can you already tell how to play the game? Let's talk a bit about how to play the game: Each level starts with germs in the bottle. Pills fall one at a time from the top of the screen. The player rotates the pill to match the color of a germ. When there are 3 vertically stacked pills that match the germ color, the germ gets destroyed and disppears from the bottle. Clear all the germs and you move on to the next, harder level. Making a wrong move is costly! Pills will stack up and prevent you from clearing the bottle easily. Doesn't that look like a challenge? Now that we know how to play, we should discuss how to design the game... "},"02-starting-development/design.html":{"url":"02-starting-development/design.html","title":"Designing this game","keywords":"","body":"Designing the game Let us take a look at a simple Dr. Mario level and break it down into pieces. An initial glance reveals that we need some common items found in most every game. What are they? Sprite objects for the germs, pills, other graphics Label objects for score, statistics, etc A way to detect collisions and act upon them A way to create the game board and decide what pieces to serve the player Let the player customize their game play experience Other developers have paid tribute to Dr. Mario and written their own clones. Here is an example that demonstrates how the UI is easy to break down into its elements: This idea is simple but demonstrates exactly what we need to do. Let's use it as inspiration for our design. A special thank you to the author of this clone if they ever read this tutorial! Next, we will need some art work... "},"02-starting-development/artwork.html":{"url":"02-starting-development/artwork.html","title":"Artwork","keywords":"","body":"Artwork The artwork for our game will be very simple. We can use colored Node objects to act as Layers and simple squares and circles to represent the germs and pill halves in the original Dr. Mario game. For simplicity purposes we can use a simple colored circle to represent the germs. Four colors seems like enough. Example: We can also use a simple colored square to represent the pills. Example: This will take many color combinations. Since we can rotate pieces we don't need quite as many conbinations as you might think. Take a look at the following table: . Red Blue Yellow Green Red y y y y Blue x y y y Yellow x x y y Green x x x y We don't need a designer or artist to do this for us! We can code right? Let's combine the 2 squares programatically. We will go through this step further on in this tutorial. With our art in hand, let's get started on the good stuff. Laying out our game and writing some code. Let's move on to creating a new Cocos Creator project... "},"02-starting-development/creating_a_cocos_creator_project.html":{"url":"02-starting-development/creating_a_cocos_creator_project.html","title":"Creating a Cocos Creator project","keywords":"","body":"Creating a new Cocos Creator project The Cocos Creator Documentation has official instructions for creating a new project. Please refer to it for any specific questions you may have. For the purpose of this game just the basic steps will be shown. Launch Cocos Creator. You will be given a window that shows you and recent projects you have worked on. It looks like this: Change to a new project by clicking on the New Project tab. We want to start a brand new game. Select an Empty Project. Give your project the name Dr-Mario-Style-Tutorial and choose a location on your filesystem that best suits you. Click Create. Cocos Creator will create your new project and put you in a window that looks like this: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. We can now move on to the ending of this chapter... "},"02-starting-development/end.html":{"url":"02-starting-development/end.html","title":"End Of Chapter Review","keywords":"","body":"End Of This Chapter! This chapter finished! Video: Moving on now to creating a main scene... "},"03-creating-a-menu-screen/":{"url":"03-creating-a-menu-screen/","title":"Creating a menu screen","keywords":"","body":"Creating a menu screen When you start to play a game the first thing you notice is a menu screen. This is usually a screen that has the game's title, perhaps who made it, colorful graphics, possibily music and most importantly a play button. Pressing the play button usually starts the game playing. Take a look at these popular games and what their menu screens look like: After looking at these examples, let's make a menu screen of our own. Table of contents Creating a scene UI Housekeeping Creating a colored background Adding a game title Adding Sprites Creating a play button End Of Chapter Review Video: at the end of this chapter there is a video demonstrating the concepts of this chapter! Shall we create our first scene? "},"03-creating-a-menu-screen/menu_scene.html":{"url":"03-creating-a-menu-screen/menu_scene.html","title":"Creating a scene","keywords":"","body":"Creating a scene Before we can do anything we need a Scene object to hold everything. Our first sene will take care of introducing the player to our game and allowing them to start the game by pressing play. This Scene will have a background, text, music and a play button so the player can start the game. To create a Scene: Click + in the Assets panel (or Right click on the Assets panel) and select Create and then Scene. Name the Scene to MainScene (notice no spaces!) and press Enter Double click on the MainScene to open it. In the Properties panel for the Scene make sure to select the checkboxes for Auto Release Assets and Async Load Assets and click Apply. With these steps done, we can now start working with our new Scene. Double click on the MainScene and lets move on to laying out our user interface! Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. We should do a bit of housekeeping, next... "},"03-creating-a-menu-screen/housekeeping.html":{"url":"03-creating-a-menu-screen/housekeeping.html","title":"UI housekeeping","keywords":"","body":"UI housekeeping We need to do a few tasks to get started laying out our user interface. These items include choosing a design resolution and adding any Sprites that we need to our Cocos Creator project. Setting the design resolution One really important task is to decide on a design resolution for our game. This is going to be a portrait oriented game so the pieces have enough time to fall from the top of the screen. Using landscape might not give the player enough time to react. Let's stick with the 960 x 640 design resolution. You can tell what the design resolution is by looking at the properties of the Canvas object: First, since we want this game portrait we need to swap the width and height with each other. Our height needs to be the biggest number. Second, we need to set the Canvas object to Fit Height and Fit Width, both checked. This means that Cocos Creator will take care of helping to decide how to scale your scenes depending upon the resolution of the device that the game is being played on. Next, in the Node tree panel, right click on Canvas node and select: Create --> Create Empty Node. This will create an empty node to hold our user interface items. Last, right click on the newly created Node and rename it to UI. Adding Sprites Sprites will be used in our game. Let's get them added right from the start. We will use them in several places so if you can do this up front is always a good. You can add Sprites by dragging-and-dropping them onto the Assets panel. The first, drag and drop the image files from your file-system into the Assets panel. These Sprites are part of this tutorial's zip file. Second, create a new group to organize these Sprites into. Name it Sprites and then drag the Sprites to the Sprites Folder: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. Let's keep sprucing up our main scene with a colored background... "},"03-creating-a-menu-screen/background.html":{"url":"03-creating-a-menu-screen/background.html","title":"Creating a colored background","keywords":"","body":"Setting a colored background Unless you want a black background, the first step is to start building up the UI simulating a \"layered\" look. You might remember Layer objects from Cocos2d-x. However, in Cocos Creator Layer objects do not exist. Instead you can use a Node and set some properties to achieve the same concept as you could before with a Layer object. Creating a background layer In the Node tree panel, Right click on UI node and select: Create --> Create Renderer Nodes --> Sprite Node (Splash). You should see a small white colored Node appear on the Scene. Example: Cocos Creator informs us of the newly created Node objects parent, in this case the Node named UI that we created above. Last, Right click on New Sprite(Splash) and rename it to Background. Customizing our background layer Now that we have our Node we need to assign it a color and a size. Typically, a background layer might take up the entire Canvas. Let's adjust the Background node's properties to do exactly this. First, select the Background node from the Node Tree panel. Second, in the Properties panel, set the color to anything you like. I am going to choose white for simplicity as this is already the default. Third, in the Properties panel, set the size and position of our Background node. We want it to take up the entire canvas, so this this should be set to the same size as the design resolution or in this case 640 x 960. Also, the position should be set to 0, 0 so the node starts at the bottom left corner of the canvas. Last, double check to make sure what you have matches our progress so far. Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. Next, we can add a game title... "},"03-creating-a-menu-screen/game_title.html":{"url":"03-creating-a-menu-screen/game_title.html","title":"Adding a game title","keywords":"","body":"Adding a game title Now that we have a background, created in the previous step, we need to add items to it to make it look more like a menu screen. Let's add a game title. To do this we will be using the Label node from the Node Library panel. First, from the Node Library panel, drag and drop a Label on to the Background node in the Node Tree panel. Second, rename the label to Title in the Node Tree panel. Third, with Title selected, change some properites for the label. This should include color, label string, font, font size, etc. Make it look how you wish. I ended up with: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. It is a good time to add some Sprites... "},"03-creating-a-menu-screen/sprites.html":{"url":"03-creating-a-menu-screen/sprites.html","title":"Adding sprites","keywords":"","body":"Adding a few graphics Besides a Title, created in the previous step, we should add a few Sprites to jazz it up. Why don't we add a few of our squares and circles that will take the place of the germs and pills in the original Dr. Mario game. To do this we will be using the Sprite node from the Node Library panel. The layout of these can be up to you. Just drag and drop from the Assets panel on to the Background node. You will end up with some variation of: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. Lastly for this chapter, we should add a button to start playing our game... "},"03-creating-a-menu-screen/play_button.html":{"url":"03-creating-a-menu-screen/play_button.html","title":"Creating a play button","keywords":"","body":"Creating a play button In the previous steps, we created a background, a game title and added some Sprites to make it look more interesting. Next, we need to add a button. When the button is pressed, we need to load the Scene object that holds the logiv for our game. Adding a Play button Adding a button, or adding button like functionality can be done in several ways. You can use a Button node from the Node Library panel. You can use a Sprite and make it act like button. Both are fine ways to achieve our goal. For this example, let's use a Button node from the Node Library panel. First, from the Node Library panel, drag and drop a Button on to the Background node in the Node Tree panel. Second, rename the label to Play in the Node Tree panel. Third, change the Label of the Play button to Start Game. Last, with Play selected, change some properites for the button. This should include position, size, color, etc. Make it look how you wish. I stuck with the default properties for the purpose of this demo. Making the Play button work Now that we have a button, we need to make it run code when we click it. First, select the Play button so that some properties can be added. Scroll down in the Properties panel until you see this: Second, use the editor to add a click event: Third, create a new JavaScript file called MenuScreen.js. This is where any code we need for this Scene will go. We will add our Play buttons logic here. You can do this by right clicking on the Script folder in the Assets Panel and selecting Create --> JavaScript. Fourth, click the Add Component button in the Properties panel and select Add Custom Component so we can add the newly created MainScene.js as a component of our Play button. Fifth, we need to add a callback to the MainScene.js so that we specify what code is to be run when the Play button is clicked. Double clicking on the MainScene.js will open it in the default external text editor specified by your operating system. Add the following callback: callback: function (event) { console.log(\"play button clicked...\"); }, We end up with a a Javascript file that looks like: Next, we need to tell the editor that when our Play button is clicked we need to run a certain chunk of Javascript code. This is easily done by dragging a reference to the button to the properties dialog. Then you select the MainScene.js file and the function you want to run. In our case we called it callback:. Selecting a better name when your needs get complex is probably a good idea. Example: Last, your Properties panel should look like this when completed: When we run our game and click the Play button we should see that it works: We will come back and add more code to this button later. For now, our button works when pressed. Let's move on to creating our main game scene, where the bulk of our game play will take place. Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. We can now move on to the ending of this chapter... "},"03-creating-a-menu-screen/end.html":{"url":"03-creating-a-menu-screen/end.html","title":"End Of Chapter Review","keywords":"","body":"End Of This Chapter! This chapter finished! You can download a completed project to this point here. Video: We can now move on to letting the player select options... "},"04-creating-an-options-scene/":{"url":"04-creating-an-options-scene/","title":"Creating a game options screen","keywords":"","body":"Creating an options screen Now that our game starts and we are ready to play why not allow the player to select a few options of how they play the game, before it starts. Recall, that the opriginal Dr. Mario also allowed this: Our game should have at least a few settings to offer the player some variety when they play. We can draw on what we have read so far to make this next scene very quickly. Table of contents Creating an \"Options\" Scene Scene Calling Another Scene End Of Chapter Review Video: throughout this chapter there are videos demonstrating the concepts of this chapter! Shall we create our game options scene? "},"04-creating-an-options-scene/options_scene.html":{"url":"04-creating-an-options-scene/options_scene.html","title":"Lay out the scene","keywords":"","body":"Letting the players choose some options We can always expand later, but for now, let's create a few settings to control which level they start with and also the speed of how fast the pieces will fall when playing. We can layout the scene quickly to perhaps look something like this: Call it OptionsScene. Do you remember how to do everything needed to make this scene? Here are some hints: Make a new scene in the Assets panel (called OptionsScene). Add a title? (optional) Add 3 buttons, one for each level, call them level1, level2, level3. Add 3 callbacks, one for each button, call them level1, level2, level3. Help: If you haven't made it this far or are stuck, you can download a completed project to this point here. Once you are at this stage we can do a few things to make this start to feel like a real game. We can make a Scene change from MainScene to OptionsScene when the game starts up. Up next, a Scene calling another Scene "},"04-creating-an-options-scene/scene_calling_scene.html":{"url":"04-creating-an-options-scene/scene_calling_scene.html","title":"Scene Calling Another Scene","keywords":"","body":""},"04-creating-an-options-scene/end.html":{"url":"04-creating-an-options-scene/end.html","title":"End Of Chapter Review","keywords":"","body":"End Of This Chapter! This chapter finished! You can download a completed project to this point here. Videos: We can now move on to letting the player select options... "},"05-laying-out-gameplay-ui/":{"url":"05-laying-out-gameplay-ui/","title":"Laying out the game user interface","keywords":"","body":"Laying out the game user interface Now that we have a menu screen that players will use to start out game, we need to give them something to play. Let's start building the core logic of our game. To do this we will layout the user interface first, then add components and code to make the game playable.Cocos Creator promotes a true team workflow by allowing artists and developers to work together on a project at the same time. Artists can work inside Cocos Creator to so Scene layout while the developers can be adding and testing game play code. They don't step on each others toes. We are going to be repeating concepts that we learned in chapter 3, so there wont be as much explanation for these steps. Refer back to chapter 3 if you get stuck. Table of contents Getting started by quick review Creating more of the user interface Starting to code Let's repeat a few basic concepts from Chapter 3 and continue on our journey... "},"05-laying-out-gameplay-ui/quick_getting_started.html":{"url":"05-laying-out-gameplay-ui/quick_getting_started.html","title":"Getting started by a quick review","keywords":"","body":"Getting started by quickly reviewing We need to repeat several steps from chapter 3 in-order to get started building our main game scene. We will go step by step, but there won't be as much detail. If you get stuck, please refer back to chapter 3 for help. Let's get started! First, create a new Scene called GameScene in the Asset panel. Second, set the design resolution of the Canvas to 640 x 960. Third, check both the Fit Height and Fit Width checkboxes. Last, create a colored background from a Sprite Node (Splash) to act as a Layer and help bring some definition to the game scene. Give the node the name UI and a size of 640 x 960 and a position of 0 x 0. You can use whatever color you wish. Example: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. Next, let us continue creating more UI elements... "},"05-laying-out-gameplay-ui/creating_the_rest_of_the_ui.html":{"url":"05-laying-out-gameplay-ui/creating_the_rest_of_the_ui.html","title":"Creating more of the game interface","keywords":"","body":"Creating more of the game play interface. We need to create the rest of our game play interface. The goal here is to make this look like the game we planned at the beginning. Remember this picture: We need to create more aspects of this to build up our game. Once we have the user interface elements laid out we can start to build logic and add code. First, create another Sprite Node (Splash) and call it GameBoard. Give it an anchor point of 0.5 x 0.5, size of 490 x 750 and a position of 111 x -98. This will act as the area where the game play happens. Second, let's add some place holders for statistics, like level, counts, etc. To do this, lets create another Sprite Node (Splash) as a child of our UI node and call it Stats. Give it an anchor point of 0.5 x 0.5, size of 200 x 600 and a position of -208 x -61. Third, let's repeat the same concept as the above steps and make a third place holder to hold some sort of branding, possibly a logo or text. To do this, lets create another Sprite Node (Splash) as a child of our UI node and call it Branding. Give it an anchor point of 0.5 x 0.5, size of 155 x 155 and a position of -225 x 385. The Scene should look like the following: Next, we can toss a few Sprites up in the Branding node. Just drag and drop them on to Branding node in theNode Tree panel. Fifth, adjust the postion and size of each Sprite to achieve the look you wish. Example: Sixth, we can add a few Labels to show statistics about the game. For now we can just add Level: and Remaining: labels. You do this the same was using the Node Library panel. Adjust the color, string, position, szie, etc of each to look how you wish. You will need two labels, one is the text and the second is the value we will show the user for each about their progress. The only requirement here is name your labels: txtLevel, txtRemaining, valLevel and valRemaining. Design this how you wish. Your Node Tree should look like this: Your UI could look look something like this example: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. We can finally start adding code.... "},"05-laying-out-gameplay-ui/starting_to_code.html":{"url":"05-laying-out-gameplay-ui/starting_to_code.html","title":"Starting to code","keywords":"","body":"Starting to code! Now that we have our user interface laid out, we can start coding. Right from the start, there are some initial coding tasks to handle. How to start playing the game Remember our Main Scene? We need to make the Play button work! How do we do that? Remember that we have all the code logic for Main Scene scene in MainScene.js. To make the Play button work we just need a single line of code added to our callback function, modified to be: callback: function (event) { cc.director.loadScene('GameScene'); } Notice that we added a line of code: cc.director.loadScene('GameScene');. This line simple says to load our GameScene. Running this change in a browser shows what happens. is replaced with Starting with core game logic When the Game Scene loads we need to have many things happen to make our game playable. We need to load a game board, load a sequence of peices that the player will use to solve the puzzle, start some music and more. To get started create GameScene.js in the Assets Panel and drag it directly into the Node Tree. Example: Doing this will allow GameScene.js to load and run on Game Scene startup. This is exactly what we need to get our game to take shape and start being playable. Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. Adding more game logic could be fun, let's do it! "},"06-writing-game-logic/":{"url":"06-writing-game-logic/","title":"Writing the core game logic","keywords":"","body":"Writing core game logic We are all set to start writing our core game logic. Our game will quickly start to take shape and become playable. Table of contents What logic does our game need? Populating the game board What logic does our game need? Let's talk about it... "},"06-writing-game-logic/what-logic-does-our-game-need.html":{"url":"06-writing-game-logic/what-logic-does-our-game-need.html","title":"What logic does our game need?","keywords":"","body":"What logic does our game need? We know how we want our game to play and we have the user interface laid out. We have also started some code to change scenes when the user presses play. Now, we need to implement the logic for our game so that it starts to become playable. But what game logic do we need to implement? We need the following: The game board to be populated with pieces for the player to destroy. (AKA the germs). Pieces to be presented to the player to help then line up and destroy the germs. (AKA the pills). The player must be able to rotate the pills to help match them up with the germs. When the player stacks three pills on top of a germ of the same color the germ and pills must disappear and then update the statistics. Sound effects and some background music. When the player clears all the germs, show a success message and load the next level. This is a fair amount of work, let's get going! Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating system's shortcut key. We can start to populate the game board... "},"06-writing-game-logic/populating-the-game-board.html":{"url":"06-writing-game-logic/populating-the-game-board.html","title":"Populating the game board","keywords":"","body":"Populating the game board Once we start to populate the game board our game will become playbale. As mentioned previously, our first step is: The game board to be populated with pieces for the player to destroy. (AKA the germs). The first step is to create a layout of germs. We are going to need germ objects and a way to store the germ objects that we create so we can manipulate them later. Since this is a demo, lets just give this game 3 levels. "}}