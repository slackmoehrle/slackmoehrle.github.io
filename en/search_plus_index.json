{"./":{"url":"./","title":"Introduction","keywords":"","body":" ** Making a Dr. Mario style game in Cocos Creator Dr. Mario was published by Nintendo in the early 1990's. It turned out to be one of the most popular games of all time. In case you are not familiar you can watch some game play. For a history lesson check out Wikipedia and this article about how the game was prototpyed. You can download the complete game, however it is recommended that you follow this tutorial step by step for maximum understanding. Table of contents The following topics are covered: Getting started Starting development ** Nintendo owns Dr. Mario, the name, the logo, the art, the music, etc. We are just fans that wanted to make a kick-ass demo to demo Cocos Creator.â†© "},"01-getting-started/":{"url":"01-getting-started/","title":"Getting started","keywords":"","body":" Let's get started! In-order to write a game, first we need to make sure our development environment is setup properly. Installing Cocos Creator is a simple double-click installlation. Table of contents Javscript developers c++ developers "},"01-getting-started/javascript-developers.html":{"url":"01-getting-started/javascript-developers.html","title":"JavaScript developers","keywords":"","body":"JavaScript developers If you are doing JavaScript development then Cocos Creator contains everything you need besides a text editor. Cocos Creator does not feature editing JavaScript code so a text editor or IDE is a must. To install Cocos Creator, please refer to the official installation guide. Possible text editors include: VS Code, Sublime Text, Atom, Web Storm and pretty much any text editor that you are comfortable with. "},"01-getting-started/cpp-developers.html":{"url":"01-getting-started/cpp-developers.html","title":"c++ developers","keywords":"","body":"C++ developers If you are doing C++ development you will need Cocos Creator, a c++ compiler, a working Cocos2d-x installation, a text editor and knowledge of using a shell (also called the command-line). To install Cocos Creator, please refer to the official installation guide. Your host system will need a C++ compiler. Each platform has many options. Please Google for instructions. Possible text editors include: VS Code, Sublime Text, Atom, Web Storm and pretty much any text editor that you are comfortable with. "},"02-starting-development/":{"url":"02-starting-development/","title":"Starting development","keywords":"","body":"Starting development Before we can begin, we must have some sort of idea about how to develop our game. Planning is important. I never start a game without sitting down and thinking about how it will be played and how I need to break down all the required pieces into manageable tasks. In this case we are reeplicating an existing game. Let's take a look at it and break it down into pieces. Table of contents Dr. Mario Designing the game Artwork Creating a Cocos Creator project "},"02-starting-development/drmario.html":{"url":"02-starting-development/drmario.html","title":"Dr. Mario introduction","keywords":"","body":"Dr. Mario Let's take a look at a typical game play scene: What is actually going on here? Can you already tell how to play the game? Let's talk a bit about how to play the game: Each level starts with germs in the bottle. Pills fall one at a time from the top of the screen. The player rotates the pill to match the color of a germ. When there are 3 pills that match the germ color, the germ gets destroyed and disppears from the bottle. Clear all the germs and you move on to the next, harder level. Making a wrong move is costly! Pills will stack up and prevent you from clearing the bottle easily. Doesn't that look like a challenge? Now that we know how to play, we should discuss how to design the game. "},"02-starting-development/design.html":{"url":"02-starting-development/design.html","title":"Designing this game","keywords":"","body":"Designing the game Let us take a look at a simple Dr. Mario level and break it down into pieces. An initial glance reveals that we need some common items found in most every game. What are they? Sprite objects for the germs, pills, other graphics Label objects for score, statistics, etc A way to detect collisions and act upon them A way to create the game board and decide what pieces to serve the player Let the player customize their game play experience Other developers have have paid trribute to Dr. Mario and written their own clones. Here is an example that demonmstrates how the UI is easy to break down into it's elements: This idea is simple but demonstrates exactly what we need to do. Let's use it as inspiration for our design. A special thank you to the author of this clone if they ever read this tutorial! "},"02-starting-development/artwork.html":{"url":"02-starting-development/artwork.html","title":"Artwork","keywords":"","body":"Artwork The artwork for our game will be very simple. We can use colored Node objects to act as Layers and simple squares and circles to represent the germs and pills in the original Dr. Mario game. For simplicity purposes we can use a simple colored circle to represent the germs. Four colors seems like enough. Example: We can also use a simple colored square to represent the pills. Example: This will take many color combinations. Since we can rotate pieces we don't need quite as many conbinations as you might think. Take a look at the following table: . R B Y G R y y y y B x y y y Y x x y y G x x x y We don't need a designer or artist to do this for us! We can code right? Let's combine the 2 squares programatically. We will go through this step further on in this tutorial. With our art in hand, let's get started on the good stuff. Laying out our game and writing some code. Code, code, code-er. "},"02-starting-development/creating_a_cocos_creator_project.html":{"url":"02-starting-development/creating_a_cocos_creator_project.html","title":"Creating a Cocos Creator project","keywords":"","body":"Creating a new Cocos Creator project The Cocos Creator Documentation has official instructions for creating a new project. Please refer to it for any specific questions you may have. For the purpose of this game just the basic steps will be shown. Launch Cocos Creator. You will be given a window that shows you anr recent projects you have worked on. It looks like this: Change to a new project by clicking on the New Project tab. We want to start a brand new game. Select an Empty Project. Give your project the name Dr-Mario-Style-Tutorial and choose a location on your filesystem that best suits you. Click Create. Cocos Creator will create your new project and put you in a window that looks like this: Next, let's tackle a starting our project. "},"03-creating-a-menu-screen/":{"url":"03-creating-a-menu-screen/","title":"Creating a menu screen","keywords":"","body":"Creating a menu screen When you start to play a game the first thing you notice is a menu screen. This is usually a screen that has the games title, perhaps who made it, colorful graphics, possibily music and most importantly a play button. Pressing the play button usually starts the game playing. Take a look at these popular games and what their menu screens look like: After looking at these examples, let's make a menu screen of our own. Table of contents Creating a scene Setting a colored background "},"03-creating-a-menu-screen/menu_scene.html":{"url":"03-creating-a-menu-screen/menu_scene.html","title":"Creating a scene","keywords":"","body":"Creating a scene Before we can do anything we need a Scene object to hold everything. Our first sene will take care of introducing the player to out game and allowing them to start the game by pressing play. As previously mentioned this Scene will have a background, text music and a play button so the player can start the game. To create a Scene: Right click on Scene in the Assets panel and select Create and then Scene. Name the Scene to MainScene (notice no spaces!) Double click on the MainScene to open it. In the Properties panel for the Scene make sure to select the checkboxes for Auto Release Assets and Async Load Assets. "},"03-creating-a-menu-screen/background.html":{"url":"03-creating-a-menu-screen/background.html","title":"Setting a colored background","keywords":"","body":"Setting a colored background Unless you want a black background, the first step is to start building up the UI simulating a \"layered\" look. You might remember Layer objects from Cocos2d-x. However, in Cocos Creator Layer objects do not exist. Instead you can use a Node and set some properties to achieve the same concept as you could before with a Layer object. "}}