{"./":{"url":"./","title":"Introduction","keywords":"","body":""},"01-getting-started/":{"url":"01-getting-started/","title":"Getting started","keywords":"","body":" Let's get started! In-order to write a game, first we need to make sure our development environment is setup properly. Installing Cocos Creator is a simple double-click installlation. Table of contents Javscript developers c++ developers "},"01-getting-started/javascript-developers.html":{"url":"01-getting-started/javascript-developers.html","title":"JavaScript developers","keywords":"","body":"JavaScript developers If you are doing JavaScript development then Cocos Creator contains everything you need besides a text editor. Cocos Creator does not feature editing JavaScript code so a text editor or IDE is a must. To install Cocos Creator, please refer to the official installation guide. Possible text editors include: VS Code, Sublime Text, Atom, Web Storm and pretty much any text editor that you are comfortable with. "},"01-getting-started/cpp-developers.html":{"url":"01-getting-started/cpp-developers.html","title":"c++ developers","keywords":"","body":"C++ developers If you are doing C++ development you will need Cocos Creator, a c++ compiler, a working Cocos2d-x installation, a text editor and knowledge of using a shell (also called the command-line). To install Cocos Creator, please refer to the official installation guide. Your host system will need a C++ compiler. Each platform has many options. Please Google for instructions. Possible text editors include: VS Code, Sublime Text, Atom, Web Storm and pretty much any text editor that you are comfortable with. "},"02-starting-development/":{"url":"02-starting-development/","title":"Starting development","keywords":"","body":"Starting development Before we can begin, we must have some sort of idea about how to develop our game. Planning is important. I never start a game without sitting down and thinking about how it will be played and how I need to break down all the required pieces into manageable tasks. In this case we are reeplicating an existing game. Let's take a look at it and break it down into pieces. Table of contents Dr. Mario Designing the game Artwork Creating a Cocos Creator project "},"02-starting-development/drmario.html":{"url":"02-starting-development/drmario.html","title":"Dr. Mario introduction","keywords":"","body":"Dr. Mario Let's take a look at a typical game play scene: What is actually going on here? Can you already tell how to play the game? Let's talk a bit about how to play the game: Each level starts with germs in the bottle. Pills fall one at a time from the top of the screen. The player rotates the pill to match the color of a germ. When there are 3 pills that match the germ color, the germ gets destroyed and disppears from the bottle. Clear all the germs and you move on to the next, harder level. Making a wrong move is costly! Pills will stack up and prevent you from clearing the bottle easily. Doesn't that look like a challenge? Now that we know how to play, we should discuss how to design the game. "},"02-starting-development/design.html":{"url":"02-starting-development/design.html","title":"Designing this game","keywords":"","body":"Designing the game Let us take a look at a simple Dr. Mario level and break it down into pieces. An initial glance reveals that we need some common items found in most every game. What are they? Sprite objects for the germs, pills, other graphics Label objects for score, statistics, etc A way to detect collisions and act upon them A way to create the game board and decide what pieces to serve the player Let the player customize their game play experience Other developers have have paid trribute to Dr. Mario and written their own clones. Here is an example that demonmstrates how the UI is easy to break down into it's elements: This idea is simple but demonstrates exactly what we need to do. Let's use it as inspiration for our design. A special thank you to the author of this clone if they ever read this tutorial! "},"02-starting-development/artwork.html":{"url":"02-starting-development/artwork.html","title":"Artwork","keywords":"","body":"Artwork The artwork for our game will be very simple. We can use colored Node objects to act as Layers and simple squares and circles to represent the germs and pills in the original Dr. Mario game. For simplicity purposes we can use a simple colored circle to represent the germs. Four colors seems like enough. Example: We can also use a simple colored square to represent the pills. Example: This will take many color combinations. Since we can rotate pieces we don't need quite as many conbinations as you might think. Take a look at the following table: . R B Y G R y y y y B x y y y Y x x y y G x x x y We don't need a designer or artist to do this for us! We can code right? Let's combine the 2 squares programatically. We will go through this step further on in this tutorial. With our art in hand, let's get started on the good stuff. Laying out our game and writing some code. Code, code, code-er. "},"02-starting-development/creating_a_cocos_creator_project.html":{"url":"02-starting-development/creating_a_cocos_creator_project.html","title":"Creating a Cocos Creator project","keywords":"","body":"Creating a new Cocos Creator project The Cocos Creator Documentation has official instructions for creating a new project. Please refer to it for any specific questions you may have. For the purpose of this game just the basic steps will be shown. Launch Cocos Creator. You will be given a window that shows you anr recent projects you have worked on. It looks like this: Change to a new project by clicking on the New Project tab. We want to start a brand new game. Select an Empty Project. Give your project the name Dr-Mario-Style-Tutorial and choose a location on your filesystem that best suits you. Click Create. Cocos Creator will create your new project and put you in a window that looks like this: Next, let's tackle a starting our project. "},"03-creating-a-menu-screen/":{"url":"03-creating-a-menu-screen/","title":"Creating a menu screen","keywords":"","body":"Creating a menu screen When you start to play a game the first thing you notice is a menu screen. This is usually a screen that has the games title, perhaps who made it, colorful graphics, possibily music and most importantly a play button. Pressing the play button usually starts the game playing. Take a look at these popular games and what their menu screens look like: After looking at these examples, let's make a menu screen of our own. Table of contents Creating a scene UI Housekeeping Creating a colored background Adding a game title Adding Sprites Creating a play button "},"03-creating-a-menu-screen/menu_scene.html":{"url":"03-creating-a-menu-screen/menu_scene.html","title":"Creating a scene","keywords":"","body":"Creating a scene Before we can do anything we need a Scene object to hold everything. Our first sene will take care of introducing the player to out game and allowing them to start the game by pressing play. As previously mentioned this Scene will have a background, text music and a play button so the player can start the game. To create a Scene: Right click on Scene in the Assets panel and select Create and then Scene. Name the Scene to MainScene (notice no spaces!) Double click on the MainScene to open it. In the Properties panel for the Scene make sure to select the checkboxes for Auto Release Assets and Async Load Assets. With these steps done, we can now start working with our new Scene. Double click on the MainScene and lets move on to laying out our user interface! Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating systems shortcut key. "},"03-creating-a-menu-screen/housekeeping.html":{"url":"03-creating-a-menu-screen/housekeeping.html","title":"UI Housekeeping","keywords":"","body":"UI housekeeping. We need to do a few tasks to get started laying out our user interface. These items include choosing a design resolution and adding any Sprites that we need to our Cocos Creator project. Setting the design resolution One really important task is to decide on a design resolution for our game. This is going to be a portrait oriented game so the pieces have enough time to fall from the top of the screen. Using landscape might not give the player enough time to react. Let's stick with the 960 x 640 design resolution. You can tell what the design resolution is by looking at the properties of the Canvas object: However, since we want this game portrait we need to swap the width and height with each other. Our height needs to be the biggest number. Next, in the Node tree panel, right click on Canvas node and select: Create --> Create Empty Node. This will create an empty node to hold our user interface items. Last, right click on the newly created Node and rename it to UI. Adding Sprites Sprites are of course going to be used in out game. Let's get them added right from the start. We will use them in several places so if you can do this up front is always a good. You can add Sprites in two ways. Drag and drop from your file system into the Assets panel. From the Cocos Creator menus, select File --> Import Asset. Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating systems shortcut key. "},"03-creating-a-menu-screen/background.html":{"url":"03-creating-a-menu-screen/background.html","title":"Creating a colored background","keywords":"","body":"Setting a colored background Unless you want a black background, the first step is to start building up the UI simulating a \"layered\" look. You might remember Layer objects from Cocos2d-x. However, in Cocos Creator Layer objects do not exist. Instead you can use a Node and set some properties to achieve the same concept as you could before with a Layer object. Creating a background layer In the Node tree panel, Right click on UI node and select: Create --> Create Render Nodes --> Sprite Node (Splash). You should see a small white colored Node appear on the Scene. Example: It is important to note that Cocos Creator informs us of the newly created Node objects parent, in this case the Node named UI we created above. Last, Right click on New Sprite(Splash) and rename it to Background. Customizing our background layer Now that we have our Node we need to assign it a color and how much space it will occupy on the Canvas. Typically a background layer might take up the entire Canvas. Let's adjust the Background node's properties to do exactly this. First, select the Background node from the Node Tree panel. Second, in the Properties panel, set the color to anything you like. I am going to choose white for simplicity as this is already the default. Third, in the Properties panel, set the size and position of our Background node. We want it to take up the entire canvas, so this this should be set to the same size as the design resolution or in this case 640 x 960. Also, the position should be set to 0, 0 so the node starts at the bottom left corner of the canvas. Last, double check to make sure what you have matches our progress so far. Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating systems shortcut key. "},"03-creating-a-menu-screen/game_title.html":{"url":"03-creating-a-menu-screen/game_title.html","title":"Adding a game title","keywords":"","body":"Adding a game title Now that we have a background, created in the previous step, we need to add items to it to make it look more like a menu screen. Let's add a game title. To do this we will be using the Label node from the Node Library panel. First, from the Node Library panel, drag and drop a Label on to the Background node in the Node Tree panel. Second, rename the label to Title in the Node Tree panel. Third, with Title selected, change some properites for the label. This should include color, label string, font, font size, etc. Make it look how you wish. I ended up with: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating systems shortcut key. "},"03-creating-a-menu-screen/sprites.html":{"url":"03-creating-a-menu-screen/sprites.html","title":"Adding Sprites","keywords":"","body":"Adding a few graphics Besides a Title, created in the previous step, we should add a few Sprites to jazz it up. Why don't we add a few of our squares and circles that will take the place of the germs and pills in the original Dr. Mario game. To do this we will be using the Sprite node from the Node Library panel. The layout of these can be up to you. Just drag and drop from the Assets panel on to the Background node. You will end up with some variation of: Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating systems shortcut key. "},"03-creating-a-menu-screen/play_button.html":{"url":"03-creating-a-menu-screen/play_button.html","title":"Creating a play button","keywords":"","body":"Creating a play buton In the previous steps, we created a background, a game title and added some Sprites to make it look more interesting. Next, we need to add a button. When the button is pressed, we need to load the Scene object that holds the logiv for our game. Adding a Play button Adding a button, or adding button like functionality can be done in several ways. You can use a Button node from the Node Library panel. You can use a Sprite and make it act like button. Both are find ways to achieve our goal. For this example, let's use a Button node from the Node Library panel. First, from the Node Library panel, drag and drop a Button on to the Background node in the Node Tree panel. Second, rename the label to Play in the Node Tree panel. Third, change the Label of the Play button to Start Game. Last, with Play selected, change some properites for the button. This should include position, size, color, etc. Make it look how you wish. I stuck with the default properties for the purpose of this demo. Making the Play button work Now that we have a button, we need to make it run code when we click it. Task: Now is a good time to save your project! From the File menu, select Save Scene or use your operating systems shortcut key. "}}